import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score

# Load Dataset
df = pd.read_csv('/content/Churn_Modelling.csv')

# Data Inspection
print(df.head())

# Data Cleaning
df.drop(columns=['RowNumber', 'CustomerId', 'Surname'], inplace=True)

# Categorical Value Counts
print(df['Geography'].value_counts())
print(df['Gender'].value_counts())

# One-Hot Encoding
df = pd.get_dummies(df, columns=['Geography', 'Gender'], drop_first=True)

# Feature and Target Separation
X = df.drop(columns=['Exited'])
y = df['Exited'].values

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Feature Scaling
scaler = StandardScaler()
X_train_trf = scaler.fit_transform(X_train)
X_test_trf = scaler.transform(X_test)

# Neural Network Model
model = Sequential([
    Dense(11, activation='relu', input_dim=11),
    Dense(11, activation='relu'),
    Dense(1, activation='sigmoid')
])

# Model Summary
model.summary()

# Compile Model
model.compile(optimizer='Adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the Model
history = model.fit(X_train_trf, y_train, epochs=100, validation_split=0.2)

# Model Weights of Output Layer
print(model.layers[2].get_weights())

# Predictions
y_log = model.predict(X_test_trf)
y_pred = np.where(y_log > 0.5, 1, 0)

# Accuracy
print("Accuracy Score:", accuracy_score(y_test, y_pred))

# Plot Loss and Accuracy
plt.figure(figsize=(12, 5))

# Loss Plot
plt.subplot(1, 2, 1)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Loss Over Epochs')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()

# Accuracy Plot
plt.subplot(1, 2, 2)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Accuracy Over Epochs')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()

plt.tight_layout()
plt.show()
